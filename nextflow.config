// single line comment
/*
Multiline comment
*/

params {
  reads = "data/*{1,2}.fastq.gz"
  outdir = "./results"

  // Skipping FastQC
  skip_fastqc = false

  // Trimming
  skipTrimming = false
  saveTrimmed = false
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  trim_nextseq = 0

  // Default aligner
  aligner = "bwa"

  // samblaster minNonOverlap Default
  minNonOverlap = 10

  // Default settings
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  conda {process.conda = "$baseDir/environment.yml"}
  test {
    includeConfig 'conf/test.config'
  }
  docker {
    enabled = true

    // fix ownership of files created by the docker container
    fixOwnership = true

    // execute docker run command as sudo
    sudo = false
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}